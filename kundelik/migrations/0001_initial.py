# Generated by Django 5.1.7 on 2025-04-26 08:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Атауы')),
            ],
            options={
                'verbose_name': 'Мектеп',
                'verbose_name_plural': 'Мектептер',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('admin', 'Администратор'), ('director', 'Директор'), ('teacher', 'Мұғалім'), ('student', 'Оқушы'), ('parent', 'Ата-ана')], max_length=20, verbose_name='Рөлі')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('iin', models.CharField(blank=True, max_length=12, null=True, unique=True, verbose_name='ЖСН')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('parent_of', models.ForeignKey(blank=True, limit_choices_to={'role': 'student'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parents', to=settings.AUTH_USER_MODEL, verbose_name='Оқушы (ата-ана үшін)')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='kundelik.school', verbose_name='Мектеп')),
            ],
            options={
                'verbose_name': 'Пайдаланушы',
                'verbose_name_plural': 'Пайдаланушылар',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Атауы')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='kundelik.school', verbose_name='Мектеп')),
            ],
            options={
                'verbose_name': 'Пән',
                'verbose_name_plural': 'Пәндер',
                'ordering': ['school', 'name'],
                'unique_together': {('name', 'school')},
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, verbose_name='Атауы (мысалы, 10А)')),
                ('teacher', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['teacher', 'director', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='classes_supervised', to=settings.AUTH_USER_MODEL, verbose_name='Сынып жетекшісі')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='kundelik.school', verbose_name='Мектеп')),
                ('subjects', models.ManyToManyField(blank=True, related_name='classes_taught_in', to='kundelik.subject', verbose_name='Осы сыныптың пәндері')),
            ],
            options={
                'verbose_name': 'Сынып',
                'verbose_name_plural': 'Сыныптар',
                'ordering': ['school', 'name'],
                'unique_together': {('name', 'school')},
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='userprofile', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пайдаланушы')),
                ('patronymic', models.CharField(blank=True, max_length=100, null=True, verbose_name='Әкесінің аты')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Туған күні')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Ер'), ('F', 'Әйел')], max_length=1, null=True, verbose_name='Жынысы')),
                ('avatar', models.ImageField(blank=True, default='avatars/default.png', null=True, upload_to='avatars/', verbose_name='Аватар')),
                ('school_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_profiles', to='kundelik.class', verbose_name='Сыныбы')),
            ],
            options={
                'verbose_name': 'Пайдаланушы профилі',
                'verbose_name_plural': 'Пайдаланушы профильдері',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Күні')),
                ('lesson_number', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], verbose_name='Сабақ нөмірі')),
                ('time_start', models.TimeField(blank=True, null=True, verbose_name='Басталу уақыты')),
                ('time_end', models.TimeField(blank=True, null=True, verbose_name='Аяқталу уақыты')),
                ('room', models.CharField(blank=True, max_length=50, null=True, verbose_name='Кабинет')),
                ('topic', models.CharField(blank=True, max_length=255, null=True, verbose_name='Сабақ тақырыбы')),
                ('task', models.TextField(blank=True, null=True, verbose_name='Үй тапсырмасы')),
                ('status', models.CharField(blank=True, choices=[('assigned', 'Берілді'), ('completed', 'Орындалды'), ('not_completed', 'Орындалмады'), ('checked', 'Тексерілді')], default='assigned', max_length=20, null=True, verbose_name='Статус')),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_entries', to='kundelik.class', verbose_name='Сынып')),
                ('teacher', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['teacher', 'director', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lessons', to=settings.AUTH_USER_MODEL, verbose_name='Мұғалім')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='schedules', to='kundelik.subject', verbose_name='Пән')),
            ],
            options={
                'verbose_name': 'Сабақ кестесі/Тапсырма',
                'verbose_name_plural': 'Сабақ кестелері/Тапсырмалар',
                'ordering': ['date', 'lesson_number', 'time_start'],
                'unique_together': {('date', 'school_class', 'lesson_number'), ('date', 'teacher', 'lesson_number')},
            },
        ),
        migrations.CreateModel(
            name='ExamGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)], verbose_name='Тоқсан')),
                ('exam_type', models.CharField(choices=[('SOR', 'БЖБ (СОР)'), ('SOCH', 'ТЖБ (СОЧ)'), ('EXAM', 'Емтихан'), ('OTHER', 'Басқа')], default='SOR', max_length=10, verbose_name='Жұмыс түрі')),
                ('grade', models.PositiveIntegerField(verbose_name='Алынған балл')),
                ('max_grade', models.PositiveIntegerField(verbose_name='Макс. балл')),
                ('date', models.DateField(verbose_name='Күні')),
                ('comment', models.CharField(blank=True, max_length=255, null=True, verbose_name='Комментарий')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='exam_grades_received', to=settings.AUTH_USER_MODEL, verbose_name='Оқушы')),
                ('teacher', models.ForeignKey(limit_choices_to={'role__in': ['teacher', 'director', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exam_grades_given', to=settings.AUTH_USER_MODEL, verbose_name='Мұғалім')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exam_grades', to='kundelik.subject', verbose_name='Пән')),
            ],
            options={
                'verbose_name': 'БЖБ/ТЖБ бағасы',
                'verbose_name_plural': 'БЖБ/ТЖБ бағалары',
                'ordering': ['-date', 'subject', 'student'],
                'unique_together': {('student', 'subject', 'term', 'exam_type')},
            },
        ),
        migrations.CreateModel(
            name='DailyGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)], verbose_name='Тоқсан')),
                ('grade', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Баға')),
                ('date', models.DateField(verbose_name='Күні')),
                ('comment', models.CharField(blank=True, max_length=255, null=True, verbose_name='Комментарий')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='daily_grades_received', to=settings.AUTH_USER_MODEL, verbose_name='Оқушы')),
                ('teacher', models.ForeignKey(limit_choices_to={'role__in': ['teacher', 'director', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='daily_grades_given', to=settings.AUTH_USER_MODEL, verbose_name='Мұғалім')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='daily_grades', to='kundelik.subject', verbose_name='Пән')),
            ],
            options={
                'verbose_name': 'Күнделікті баға',
                'verbose_name_plural': 'Күнделікті бағалар',
                'ordering': ['-date', 'subject', 'student'],
                'unique_together': {('student', 'subject', 'date')},
            },
        ),
    ]
